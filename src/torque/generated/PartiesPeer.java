package torque.generated;

import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * parties
 *
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Tue Feb 21 11:05:11 CET 2012]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class PartiesPeer
    extends torque.generated.BasePartiesPeer
{
    /** Serial version */
    private static final long serialVersionUID = 1329818711143L;

	public static boolean nomPris(String nom) {
		boolean c = true;
		try {
			BasePartiesPeer.retrieveByPK(nom);
		} catch (NoRowsException e) {
			c = false;
		} catch (TooManyRowsException e) {
		} catch (TorqueException e) {
		}
		
		return c;
	}

	@SuppressWarnings("unchecked")
	public static List<Parties> doSelectAll() throws TorqueException {
		return PartiesPeer.doSelect(new Criteria());
	}

	public static Parties charger(String partie) {
		Parties p = null;
		try {
			p = PartiesPeer.retrieveByPK(partie);
		} catch (NoRowsException e) {
		} catch (TooManyRowsException e) {
		} catch (TorqueException e) {
		}
		
		return p;
	}

	@SuppressWarnings("unchecked")
	public static void doDeletePartie(Parties partie) {
		Criteria criteriaPartie = new Criteria();
		List<PartiesVaisseaux> partieV;
		try {
			partieV = partie.getPartiesVaisseauxs();
			List<ObjetsParties> objetsP = partie.getObjetsPartiess();
			criteriaPartie.add(PartiesPeer.NOM, partie.getNom());
			
			// Suppression des parties_vaisseaux
			for (PartiesVaisseaux pv : partieV) {
				Criteria criteriaPartieV = new Criteria();
				criteriaPartieV.add(PartiesVaisseauxPeer.NOM_PARTIE, pv.getNomPartie());
				criteriaPartieV.add(PartiesVaisseauxPeer.NOM_VAISSEAU, pv.getNomVaisseau());
				
				try {
					// Suppression des objets_vaisseaux
					List<ObjetsVaisseaux> lov = pv.getObjetsVaisseauxs();
					for (ObjetsVaisseaux ov : lov) {
						Criteria criteriaObjetVaisseau = new Criteria();
						criteriaObjetVaisseau.add(ObjetsVaisseauxPeer.NOM_OBJET, ov.getNomObjet());
						criteriaObjetVaisseau.add(ObjetsVaisseauxPeer.NOM_PARTIE, ov.getNomPartie());
						criteriaObjetVaisseau.add(ObjetsVaisseauxPeer.NOM_VAISSEAU, ov.getNomVaisseau());
						ObjetsVaisseauxPeer.doDelete(criteriaObjetVaisseau);
					}
					PartiesVaisseauxPeer.doDelete(criteriaPartieV);
				} catch (TorqueException e) {
					e.printStackTrace();
				}
			}
			
			// Suppression des opbjets_parties
			for (ObjetsParties op : objetsP) {
				try {
					Criteria criteriaObjetPartie = new Criteria();
					criteriaObjetPartie.add(ObjetsPartiesPeer.NOM_OBJET, op.getNomObjet());
					criteriaObjetPartie.add(ObjetsPartiesPeer.NOM_PARTIE, op.getNomPartie());
					ObjetsPartiesPeer.doDelete(criteriaObjetPartie);
				} catch (TorqueException e) {
					e.printStackTrace();
				}
			}
			// Suppression de la partie
			PartiesPeer.doDelete(criteriaPartie);
		} catch (TorqueException e1) {
			e1.printStackTrace();
		}
	}

}

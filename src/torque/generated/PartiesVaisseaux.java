package torque.generated;


import java.util.List;

import org.apache.torque.TorqueException;
import org.apache.torque.om.Persistent;

/**
 * parties_vaisseaux
 *
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Tue Feb 21 11:05:11 CET 2012]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 */
public  class PartiesVaisseaux
    extends torque.generated.BasePartiesVaisseaux
    implements Persistent
{
    /** Serial version */
    private static final long serialVersionUID = 1329818711143L;
    public PartiesVaisseaux() { super(); }
    
    /**
     * 
     * @param atq Attaque
     * @param frc Champ de Force
     * @param dgt Degats
     * @param nrj Energie
     */
    public PartiesVaisseaux (int atq, int cdf, int dgt, int nrj, int coordX, int coordY) {
    	super();
    	this.setAttaque(atq);
    	this.setChamp(cdf);
    	this.setDegats(dgt);
    	this.setEnergie(nrj*10);
    	this.setCoordX(coordX);
    	this.setCoordY(coordY);
    }
    
    @SuppressWarnings("unchecked")
	public int getAttaqueImproved() {
    	int r = super.getAttaque();
		try {
			List<ObjetsVaisseaux> objets;
			objets = this.getObjetsVaisseauxs();
			for (ObjetsVaisseaux o : objets) {
	    		if (o.getObjets().getCarac().equals("attaque") && o.getEquipe())
	    			r += o.getObjets().getPoints();
	    	}
		} catch (TorqueException e) {
			e.printStackTrace();
		}
    	
    	return r;
    }
    
    @SuppressWarnings("unchecked")
	public int getChampImproved() {
    	int r = super.getChamp();
		try {
			List<ObjetsVaisseaux> objets;
			objets = this.getObjetsVaisseauxs();
			for (ObjetsVaisseaux o : objets) {
	    		if (o.getObjets().getCarac().equals("champ") && o.getEquipe())
	    			r += o.getObjets().getPoints();
	    	}
		} catch (TorqueException e) {
			e.printStackTrace();
		}
    	
    	return r;
    }
    
    @SuppressWarnings("unchecked")
	public int getDegatsImproved() {
    	int r = super.getDegats();
		try {
			List<ObjetsVaisseaux> objets;
			objets = this.getObjetsVaisseauxs();
			for (ObjetsVaisseaux o : objets) {
	    		if (o.getObjets().getCarac().equals("degat") && o.getEquipe()) {
	    			r += o.getObjets().getPoints();
	    		}
	    	}
		} catch (TorqueException e) {
			e.printStackTrace();
		}
    	
    	return r;
    }
    
	@SuppressWarnings("unchecked")
	public int getEnergieImproved() {
    	int r = super.getEnergie();
		try {
			List<ObjetsVaisseaux> objets;
			objets = this.getObjetsVaisseauxs();
			for (ObjetsVaisseaux o : objets) {
	    		if (o.getObjets().getCarac().equals("energie") && o.getEquipe())
	    			r += o.getObjets().getPoints();
	    	}
		} catch (TorqueException e) {
			e.printStackTrace();
		}
    	
    	return r;
    }

}
